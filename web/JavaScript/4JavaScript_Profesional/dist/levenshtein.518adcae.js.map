{"version":3,"sources":["ejercicios/proxy/levenshtein.js"],"names":["collator","Intl","Collator","sensitivity","err","console","log","prevRow","str2Char","Levenshtein","get","str1","str2","options","useCollator","str1Len","length","str2Len","curCol","nextCol","i","j","tmp","charCodeAt","strCmp","compare","charAt","String","fromCharCode","define","amd","module","exports","self","postMessage","importScripts","window"],"mappings":"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","file":"levenshtein.518adcae.js","sourceRoot":"..","sourcesContent":["(function () {\n  \"use strict\";\n\n  var collator;\n  try {\n    collator =\n      typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\"\n        ? Intl.Collator(\"generic\", { sensitivity: \"base\" })\n        : null;\n  } catch (err) {\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n  // arrays to re-use\n  var prevRow = [],\n    str2Char = [];\n\n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function (str1, str2, options) {\n      var useCollator = options && collator && options.useCollator;\n\n      var str1Len = str1.length,\n        str2Len = str2.length;\n\n      // base cases\n      if (str1Len === 0) return str2Len;\n      if (str2Len === 0) return str1Len;\n\n      // two rows\n      var curCol, nextCol, i, j, tmp;\n\n      // initialise previous row\n      for (i = 0; i < str2Len; ++i) {\n        prevRow[i] = i;\n        str2Char[i] = str2.charCodeAt(i);\n      }\n      prevRow[str2Len] = str2Len;\n\n      var strCmp;\n      if (useCollator) {\n        // calculate current row distance from previous row using collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp =\n              0 ===\n              collator.compare(\n                str1.charAt(i),\n                String.fromCharCode(str2Char[j])\n              );\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n      } else {\n        // calculate current row distance from previous row without collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = str1.charCodeAt(i) === str2Char[j];\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n      }\n      return nextCol;\n    },\n  };\n\n  // amd\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function () {\n      return Levenshtein;\n    });\n  }\n  // commonjs\n  else if (\n    typeof module !== \"undefined\" &&\n    module !== null &&\n    typeof exports !== \"undefined\" &&\n    module.exports === exports\n  ) {\n    module.exports = Levenshtein;\n  }\n  // web worker\n  else if (\n    typeof self !== \"undefined\" &&\n    typeof self.postMessage === \"function\" &&\n    typeof self.importScripts === \"function\"\n  ) {\n    self.Levenshtein = Levenshtein;\n  }\n  // browser main thread\n  else if (typeof window !== \"undefined\" && window !== null) {\n    window.Levenshtein = Levenshtein;\n  }\n})();\n"]}